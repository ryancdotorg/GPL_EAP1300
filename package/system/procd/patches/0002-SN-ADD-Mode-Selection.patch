Index: procd-2015-10-29.1/rcS.c
===================================================================
--- procd-2015-10-29.1.orig/rcS.c
+++ procd-2015-10-29.1/rcS.c
@@ -40,6 +40,52 @@ struct initd {
 	char *param;
 };
 
+#define SENAO_BOOT_MODE_SEL 1
+#if SENAO_BOOT_MODE_SEL
+/*****************************************************************
+* NAME: rcSInteract
+* ---------------------------------------------------------------
+* FUNCTION:  
+* INPUT:    
+* OUTPUT:   
+* Author:   
+* Modify:   
+****************************************************************/
+static int rcSInteract(char *output, int outputlen, char *fmt, ...) 
+{
+	static char cmd_for_rcSInteract[256];
+	FILE *pipe;
+	int c,i;
+	va_list ap;
+
+	va_start(ap, fmt);
+	vsnprintf(cmd_for_rcSInteract, sizeof(cmd_for_rcSInteract), fmt, ap);
+	va_end(ap);
+
+	if((pipe = popen(cmd_for_rcSInteract, "r")) == NULL)
+		goto err;
+
+	memset(output, 0, outputlen);	
+	for(i = 0; ((c = fgetc(pipe)) != EOF) && (i < outputlen - 1); i++)
+		output[i] = (char) c;
+
+	output[i] = '\0';
+	pclose(pipe);
+
+	if(strlen(output) == 0)
+		goto noresponse;
+
+	return 1;//command return some values
+	
+noresponse:
+	return 0;//command return nothing
+
+err:
+	strcpy(output, "ERROR");
+	return -1;
+}
+#endif
+
 static void pipe_cb(struct ustream *s, int bytes)
 {
 	char *newline, *str;
@@ -158,10 +204,42 @@ static int _rc(struct runqueue *q, char
 
 int rcS(char *pattern, char *param, void (*q_empty)(struct runqueue *))
 {
+#if SENAO_BOOT_MODE_SEL
+    int rval=0;
+    char op[16];
+#endif
+
 	runqueue_init(&q);
 	q.empty_cb = q_empty;
 	q.max_running_tasks = 1;
 
+#if SENAO_BOOT_MODE_SEL
+    /* only chnage boot process */
+    if (strcmp(param, "boot"))
+        goto dft;
+
+	/* get op_mode */
+    rval = rcSInteract(op, sizeof(op), "setconfig -g 5");
+    if(rval!=1)
+        goto dft;
+	
+	/* mode selection */
+    switch (atoi(op))
+    {
+        case 2:
+            printf("== boot_mode_sel 2 ==\n");
+           	return _rc(&q, "/etc/none.d", "N", "*", param);
+        case 3:
+            printf("== boot_mode_sel 3 ==\n");
+           	return _rc(&q, "/etc/factory.d","F", "*", param);
+        case 4:
+            printf("== boot_mode_sel 4 ==\n");
+           	return _rc(&q, "/etc/tp.d","T", "*", param);
+        default:
+            printf("== boot_mode_sel 0 ==\n");
+    }
+dft:
+#endif
 	return _rc(&q, "/etc/rc.d", pattern, "*", param);
 }
 
