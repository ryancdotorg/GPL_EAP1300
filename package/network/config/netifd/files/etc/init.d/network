#!/bin/sh /etc/rc.common

START=20
STOP=90

USE_PROCD=1

include /lib/senao-shell-libs/senao-vlan-network
test -f /lib/sn_set_mac.sh && . /lib/sn_set_mac.sh || sn_set_mac() { return 0; }

init_switch() {
	setup_switch() { return 0; }

	include /lib/network
	setup_switch
}

network_cleanup() {
	#killall netifd 2&> /dev/null
	echo
}

service_started() {
	ubus -t 30 wait_for network.interface
	/sbin/wifi reload_legacy
	mesh_bridge
}

start_service() {
	# for dakota, need the script to fix VLAN issue.
	[ -f /usr/sbin/ethernet_vlan_sw ] && /usr/sbin/ethernet_vlan_sw

	sn_set_mac
	init_switch
        [ -f /etc/init.d/ethvlan ] && /etc/init.d/ethvlan reload 

	[ -e "usr/sbin/fst.sh" ] && /usr/sbin/fst.sh configure

	lacp_start
	isolation_vlan_settings

	procd_open_instance
	procd_set_param command /sbin/netifd
	procd_set_param respawn
	procd_set_param watch network.interface
	[ -e /proc/sys/kernel/core_pattern ] && {
		procd_set_param limits core="unlimited"
		# Yolin: avoid oom if loop crash to create core dump file..
		# echo '/tmp/%e.%p.%s.%t.core' > /proc/sys/kernel/core_pattern
	}
	procd_close_instance
	[ -f /usr/bin/lte-cm ] && {
		/usr/bin/lte-cm start
	}
}

reload_service() {
	local rv=0

	lacp_reload
	#/sbin/wifi down
	isolation_vlan_settings
	# wait for ubus reload in wifi down.
	ubus -t 10 wait_for network.interface

	init_switch
        [ -f /etc/init.d/ethvlan ] && /etc/init.d/ethvlan reload  
	ubus call network reload || rv=1
	ubus -t 10 wait_for network.interface
	/sbin/wifi up
	mesh_bridge
	[ -e "/sbin/wifi_reload_log.sh" ] && /sbin/wifi_reload_log.sh "all" "network reload"

	return $rv
}

stop_service() {
	/sbin/wifi down
	[ -f /usr/bin/lte-cm ] && {
		/usr/bin/lte-cm stop
	}
	ifdown -a
	sleep 1
	network_cleanup
}

service_running() {
	ubus -t 30 wait_for network.interface
}

validate_atm_bridge_section()
{
	uci_validate_section network "atm-bridge" "${1}" \
		'unit:uinteger:0' \
		'vci:range(32, 65535):35' \
		'vpi:range(0, 255):8' \
		'atmdev:uinteger:0' \
		'encaps:or("llc", "vc"):llc' \
		'payload:or("bridged", "routed"):bridged'
}

validate_route_section()
{
	uci_validate_section network route "${1}" \
		'interface:string' \
		'target:cidr4' \
		'netmask:netmask4' \
		'gateway:ip4addr' \
		'metric:uinteger' \
		'mtu:uinteger' \
		'table:or(range(0,65535),string)'
}

validate_route6_section()
{
	uci_validate_section network route6 "${1}" \
		'interface:string' \
		'target:cidr6' \
		'gateway:ip6addr' \
		'metric:uinteger' \
		'mtu:uinteger' \
		'table:or(range(0,65535),string)'
}

validate_rule_section()
{
	uci_validate_section network rule "${1}" \
		'in:string' \
		'out:string' \
		'src:cidr4' \
		'dest:cidr4' \
		'tos:range(0,31)' \
		'mark:string' \
		'invert:bool' \
		'lookup:or(range(0,65535),string)' \
		'goto:range(0,65535)' \
		'action:or("prohibit", "unreachable", "blackhole", "throw")'
}

validate_rule6_section()
{
	uci_validate_section network rule6 "${1}" \
		'in:string' \
		'out:string' \
		'src:cidr6' \
		'dest:cidr6' \
		'tos:range(0,31)' \
		'mark:string' \
		'invert:bool' \
		'lookup:or(range(0,65535),string)' \
		'goto:range(0,65535)' \
		'action:or("prohibit", "unreachable", "blackhole", "throw")'
}

validate_switch_section()
{
	uci_validate_section network switch "${1}" \
		'name:string' \
		'enable:bool' \
		'enable_vlan:bool' \
		'reset:bool'
}

validate_switch_vlan()
{
	uci_validate_section network switch_vlan "${1}" \
		'device:string' \
		'vlan:uinteger' \
		'ports:list(ports)'
}

service_triggers()
{
	procd_add_reload_trigger network wireless

	procd_open_validate
	validate_atm_bridge_section
	validate_route_section
	validate_route6_section
	validate_rule_section
	validate_rule6_section
	validate_switch_section
	validate_switch_vlan
	procd_close_validate
}

shutdown() {
	ifdown -a
	sleep 1
	network_cleanup
}
