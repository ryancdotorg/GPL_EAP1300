<%+header%>
<%local uci = luci.model.uci.cursor()%>
<%local laninfo = luci.model.uci.cursor():get_all("network", "lan")%>
<%
	if uci:get("functionlist","functionlist","SUPPORT_IPV6_SETTING_INDEPENDENT") == "1" then
		laninfo["dns"] = laninfo["prev_dns"] or ""
		laninfo["ip6addr"] = laninfo["prev_ip6addr"] or ""
		laninfo["ip6gw"] = laninfo["prev_ip6gw"] or ""
	end
%>
<%
if  uci:get('functionlist','functionlist','SUPPORT_ETHERNET_VLAN') == '1' then -----#### SUPPORT_ETHERNET_VLAN START ###
%>
<STYLE type="text/css">
.ecm-tbl .tbl-grey {
    background-color: #EEEEEE;
    padding-left: 6px;
    vertical-align : middle;
}
.ecm-tbl .tbl-grey-15px {
    background-color: #EEEEEE;
    padding-left: 6px;
}
.tbl-grey {
    border-bottom: 1px solid #EEEEEE;
    color: #000000;
    font-size: 16px;
    height: 27px;
}
.tbl-grey-15px {
    border-bottom: 1px solid #EEEEEE;
    color: #000000;
    font-size: 15px;
    height: 27px;
    line-height: 19px;
}
.ecm-tbl td:not(.title){
    text-align: center;
}

</STYLE>
<%
end-----####  SUPPORT_ETHERNET_VLAN END #### 
%>
<form action="<%=REQUEST_URI%>" method="post">
<table>
	<input type="hidden" name="linklocal_ipv6_checked">
	<tr>
		<td colspan="2" class="title">IPv4 <%:Settings%></td>
	</tr>
	<tr class="title-option">
		<td style="width:40%" myid="title_lan_dhcp_protocol"><%:IP Network Setting%></td>
		<td style="width:60%">
		<input type="radio" value="dhcp" name="ipv4_proto" myid="lan_dhcp_protocol_enable" onclick="proto_display()"/>&nbsp;<%:DHCP%>&nbsp;&nbsp;
		<input type="radio" value="static" name="ipv4_proto" myid="lan_dhcp_protocol_disable" onclick="proto_display()"/>&nbsp;<%:Static IP%>
		</td>
	</tr>
	<tbody id="proto_display">
	<tr class="title-option">
		<td myid="title_lan_ipaddr"><%:IP Address%></td>
		<td><input name="ipv4_ipaddr" myid="lan_ipaddr" value="<%=laninfo['ipaddr'] or ''%>" type="text" maxlength="15"/></td>
	</tr>
	<tr class="title-option">
		<td myid="title_lan_netmask"><%:Subnet Mask%></td>
		<td><input name="ipv4_netmask" myid="lan_netmask" value="<%=laninfo['netmask'] or ''%>" type="text" maxlength="15"/></td>
	</tr>
	<tr class="title-option">
		<td myid="title_lan_gateway"><%:Gateway%></td>
		<td><input name="ipv4_gateway" myid="lan_gateway" value="<%=laninfo['gateway'] or ''%>" type="text" maxlength="15"/></td>
	</tr>
	<tr class="title-option">
		<td myid="title_lan_dns1"><%:Primary DNS%></td>
		<td><input name="ipv4_dns1" myid="lan_dns1" type="text" maxlength="15"/></td>
	</tr>
	<tr class="title-option">
		<td myid="title_lan_dns2"><%:Secondary DNS%></td>
		<td><input name="ipv4_dns2" myid="lan_dns2" type="text" maxlength="15"/></td>
	</tr>
	</tbody>
</table>
<br/>
<%
	if (uci:get("functionlist","functionlist","SUPPORT_IPV6_DISABLED") or "0") == "0" then
%>
<table>
	<tr>
		<td class="title" id="title_lan_linklocal_enable">IPv6 <%:Settings%></td>
<%
if uci:get("functionlist","functionlist","SUPPORT_IPV6_SETTING_INDEPENDENT") == "1" then
%>
		<td class="title"><select name="ipv6_proto" onchange="proto_display()"/>
			<option value="disabled"> Disable IPv6 </option>
			<option value="link_local_only"> Link Local address only </option>
			<option value="static"> Static IPv6 </option>
		</td>
<%else%>
		<td class="title"><input type="checkbox" name="linklocal_ipv6" id="lan_linklocal_enable" myid="lan_linklocal_enable" onclick="ipv6_display()"/>&nbsp;
		<span myid="title_lan_linklocal_enable"><%:Link-local Address%></span></td>
<%end%>
	</tr>
<tbody id="ipv6_setting_span">
	<tr class="title-option">
		<td style="width:40%" myid="title_lan_ip6addr"><%:IP Address%></td>
		<td style="width:60%"><input name="ipv6_ipaddr" myid="lan_ip6addr" type="text" maxlength="39"/></td>
	</tr>
	<tr class="title-option">
		<td myid="title_lan_ip6prefixlen"><%:Subnet Prefix Length%></td>
		<td><input name="ipv6_subprefixleng" myid="lan_ip6prefixlen" type="text" maxlength="3"/></td>
	</tr>
	<tr class="title-option">
		<td myid="title_lan_ip6gw"><%:Gateway%></td>
		<td><input name="ipv6_gateway" myid="lan_ip6gw" type="text" maxlength="39"/></td>
	</tr>
	<tr class="title-option">
		<td myid="title_lan_ip6dns1"><%:Primary DNS%></td>
		<td><input name="ipv6_dns1" myid="lan_ip6dns1" type="text" maxlength="39"/></td>
	</tr>
	<tr class="title-option">
		<td myid="title_lan_ip6dns2"><%:Secondary DNS%></td>
		<td><input name="ipv6_dns2" myid="lan_ip6dns2" type="text" maxlength="39"/></td>
	</tr>
</tbody>
</table>
<br/>
<%
end

%>
<table>
	<tr>
		<td colspan="2" class="title"><%:Spanning Tree Protocol (STP) Settings%></td>
	</tr>
	<tr class="title-option">
		<td style="width:40%" myid="title_lan_stp"><%:Status%></td>
		<td style="width:60%">
			<input type="radio" value="1" name="enable_stp" myid="lan_stp_enable" onclick="stp_status()"/>&nbsp;<%:Enable%>&nbsp;&nbsp;
			<input type="radio" value="0" name="enable_stp" myid="lan_stp_disable" onclick="stp_status()"/>&nbsp;<%:Disable%>
		</td>
	</tr>
	<tr class="title-option">
		<td myid="title_lan_stp_hello"><%:Hello Time%></td>
		<td><input type="text" maxlength="2" name="stp_hello_time" myid="lan_stp_hello" value="<%=laninfo['hello_time']%>"/>&nbsp;<%:seconds%> (1-10)</td>
	</tr>
	<tr class="title-option">
		<td myid="title_lan_stp_mage"><%:Max Age%></td>
		<td><input type="text" maxlength="2" name="stp_max_age" myid="lan_stp_mage" value="<%=laninfo['max_age']%>"/>&nbsp;<%:seconds%> (6-40)</td>
	</tr>
	<tr class="title-option">
		<td myid="title_lan_stp_delay"><%:Forward Delay%></td>
		<td><input type="text" maxlength="4" name="stp_forward_delay" myid="lan_stp_delay" value="<%=laninfo['forward_delay']%>"/>&nbsp;<%:seconds%> (4-30)</td>
	</tr>
	<tr class="title-option">
		<td myid="title_lan_stp_priority"><%:Priority%></td>
		<td><input type="text" maxlength="5" name="stp_priority" myid="lan_stp_priority" value="<%=laninfo['priority']%>"/>&nbsp;(0-65535)</td>
	</tr>
</table>
<%
if  uci:get('functionlist','functionlist','SUPPORT_ETHERNET_BONDING') == '1' then -----#### SUPPORT_ETHERNET_BONDING START ###
%>
<table>
	<tr>
		<td colspan="2" class="title"><%:Link Aggregation Control Protocol (LACP) Settings%></td>
	</tr>
	<tr class="title-option">
		<td style="width:40%" myid="title_lan_stp"><%:Status%></td>
		<td style="width:60%">
			<input type="radio" value="1" name="lacp_enable" />&nbsp;<%:Enable%>&nbsp;&nbsp;
			<input type="radio" value="0" name="lacp_enable" />&nbsp;<%:Disable%>
		</td>
	</tr>
	<tr class="title-option">
		<td style="width:40%" ><%:Timeout%></td>
		<td style="width:60%">
			<input type="radio" value="0" name="short_timeout" />&nbsp;<%:Long%>&nbsp;&nbsp;
			<input type="radio" value="1" name="short_timeout" />&nbsp;<%:Short%>
		</td>
	</tr>
	<tr class="title-option">
		<td style="width:40%" ><%:System Priority%></td>
		<td style="width:60%">
			<input type="text" maxlength="5" name="system_priority" />&nbsp;(1~65535)
		</td>
	</tr>
</table>
<%
end-----####  SUPPORT_ETHERNET_BONDING END #### 
%>
<%
if  uci:get('functionlist','functionlist','SUPPORT_ETHERNET_VLAN') == '1' then -----#### SUPPORT_ETHERNET_VLAN START ###
%>
<div id="lan_port_settings" class="table"></div>
<%
end-----####  SUPPORT_ETHERNET_VLAN END #### 
%>
<br/>
<div class="cbi-page-actions">
<%if luci.model.uci.cursor():get('functionlist','functionlist','HAS_ALL_APPLY') == '1' then%>	
	<input class="cbi-button cbi-button-save" name="submitType" myid="button_save" onclick="return saveChanges()" type="submit" value="<%:Apply%>">&nbsp;<span class="btn_desc"><%:Apply saved settings to take effect %></span>
<%else%>
	<input class="cbi-button cbi-button-save" name="submitType" myid="button_save" onclick="return saveChanges()" type="submit" value="<%:Save%>">&nbsp;<span class="btn_desc"><%:Save current setting(s)%></span>
<%end%>
</div>
</form>
<script>
	var stp={en:"<%=laninfo['stp']%>"};

	var lan={proto:"<%=laninfo['proto']%>", dns:"<%=laninfo['dns']%>"};

	var t_dns,dns1="",dns2="", ipv6_addr="", ipv6_prefix="", ipv6_dns1="", ipv6_dns2="",ipv6_gw="";
	if(lan.dns.length)
	{
		t_dns = lan.dns.split(" ");
		dns1 = t_dns[0] || "";
		dns2 = t_dns[1] || "";
		ipv6_dns1 = t_dns[2] || "";
		ipv6_dns2 = t_dns[3] || "";
	}
<%
	if (uci:get("functionlist","functionlist","SUPPORT_IPV6_DISABLED") or "0") == "0" then
%>
	var ipv6={linklocal:"<%=laninfo['ip6LinkLocalEn']%>", addr:"<%=laninfo['ip6addr']%>",gw:"<%=laninfo['ip6gw']%>"};	
	
	if(ipv6.addr != "")
	{
		ipv6_addr = ipv6.addr.split("/")[0] || "";
		ipv6_prefix = ipv6.addr.split("/")[1] || "";
	}
	if(ipv6.gw != ""){
		ipv6_gw = ipv6.gw || "";
	}

if(functionlist.SUPPORT_IPV6_SETTING_INDEPENDENT=="1"){
	$('select[name$="ipv6_proto"]').val("<%=laninfo['ipv6_proto']%>");
}else{
	document.getElementsByName('linklocal_ipv6')[0].checked = (ipv6.linklocal == "1");
}
	

	document.getElementsByName('ipv6_ipaddr')[0].value=ipv6_addr;
	document.getElementsByName('ipv6_subprefixleng')[0].value=ipv6_prefix;
	document.getElementsByName('ipv6_gateway')[0].value=ipv6_gw;
	document.getElementsByName('ipv6_dns1')[0].value = ipv6_dns1;
	document.getElementsByName('ipv6_dns2')[0].value = ipv6_dns2;
<%
end
%>

	document.getElementsByName('ipv4_dns1')[0].value=dns1;
	document.getElementsByName('ipv4_dns2')[0].value=dns2;
	document.getElementsByName('ipv4_proto')[((lan.proto=="static")?"1":"0")].checked = true;
	document.getElementsByName('enable_stp')[((stp.en=="1")?"0":"1")].checked = true;

	if(functionlist.SUPPORT_CBMODE_DISABLE_STP=="1")
	{
		var wifi0_mode='<%=uci:get("wireless","wifi0","opmode")%>';
		var wifi1_mode='<%=uci:get("wireless","wifi1","opmode")%>';

		if ((wifi0_mode=="sta") || (wifi1_mode=="sta"))
		{
			$('input[name="enable_stp"]').attr("disabled", "disabled");
		}
	}
	if(functionlist.SUPPORT_MESH_SETTING=="1")
	{
		var mesh_disable='<%=uci:get("mesh","wifi","disabled")%>';
		if(mesh_disable==0)
			$('input[name="enable_stp"]').attr("disabled", "disabled");
	}
	if (functionlist.SUPPORT_ENJET=="1")
	{
		var enjet_enable = '<%=uci:get("wireless","wifi1","qboost_enable") or 0%>';
		if (enjet_enable == "1")
		{
			$('input[name="enable_stp"]').attr("disabled", "disabled");
		}
	}

	proto_display();
	stp_status();
	
	function proto_display(){
		var proto=document.getElementsByName('ipv4_proto')[0].checked;
		document.getElementById('proto_display').style.display=((proto)?"none":"");
<%
	if (uci:get("functionlist","functionlist","SUPPORT_IPV6_DISABLED") or "0") == "0" then
%>
if(functionlist.SUPPORT_IPV6_SETTING_INDEPENDENT == "1"){
	var ipv6_proto=$('select[name$="ipv6_proto"]').find('option:selected').val();
		if(ipv6_proto=="static")
		{
			$("input[name^='ipv6_']").removeAttr("disabled");
			$('#ipv6_setting_span').show();
		}
		else
		{
			
			$("input[name^='ipv6_']").attr("disabled", "disabled");
			$('#ipv6_setting_span').hide();
		}		
}else{
		if(proto)
		{
			document.getElementsByName('linklocal_ipv6')[0].checked = "1";
			$("input[name='linklocal_ipv6_checked']").val("1");
			$("input[name='linklocal_ipv6']").attr("disabled", "disabled");
			$("input[name^='ipv6_']").attr("disabled", "disabled");
		}
		else
		{
			$("input[name^='ipv6_']").removeAttr("disabled");
			$("input[name='linklocal_ipv6']").removeAttr("disabled");
			ipv6_display();
		}	
}

<%
end
%>		
	}
	function ipv6_display(){
		var sta = document.getElementsByName('linklocal_ipv6')[0].checked;
		if(sta)
		{
			$("input[name='linklocal_ipv6_checked']").val("1");
			$("input[name^='ipv6_']").attr("disabled", "disabled");
		}
		else
		{
			$("input[name^='ipv6_']").removeAttr("disabled");
		}
	}
	function stp_status(){
		var sta=document.getElementsByName('enable_stp')[0].checked;
		if(sta)
		{
			$('input[name^="stp_"]').removeAttr("disabled");
		}
		else
		{
			$('input[name^="stp_"]').attr("disabled", "disabled");
		}
	}
	function saveChanges(){
		ajax_setCsrf();
		// if(functionlist.SUPPORT_ETHERNET_BONDING==1){
		// 	get_lacp_mut_status();			
		// }		
		/*<%#ipv4 check%>*/
		if(document.getElementsByName('ipv4_proto')[1].checked || (functionlist.SUPPORT_IPV6_SETTING_INDEPENDENT==1)) //<%#Static%>
		{
			if(!isIpaddr(getByName('ipv4_ipaddr').value))
			{
				alert(invalid("<%:IP Address%>"));
				setfocus(getByName('ipv4_ipaddr'));
				return false;
			}
			if(isMulticast(getByName('ipv4_ipaddr').value))
			{
				alert("<%=translate('The ip address cannot be a multicast ip address.')%>");
				setfocus(getByName('ipv4_ipaddr'));
				return false;
			}
			if(isLinklocal(getByName('ipv4_ipaddr').value))
			{
				alert("<%:The ip address cannot be a linklocal ip address.%>");
				setfocus(getByName('ipv4_ipaddr'));
				return false;
			}
			if(isLoopback(getByName('ipv4_ipaddr').value))
			{
				alert("<%=translate('The ip address cannot be a loopback ip address.')%>");
				setfocus(getByName('ipv4_ipaddr'));
				return false;
			}
			
			if(!isSubMask(getByName('ipv4_netmask').value))
			{
				alert(invalid("<%:Subnet Mask%>"));
				setfocus(getByName('ipv4_netmask'));
				return false;
			}
			<%local uci = require "luci.model.uci".cursor()%>
			var gn1_dis='<%=uci:get("wireless", "wifi0_guest", "disabled")%>';
			var gn2_dis='<%=uci:get("wireless", "wifi1_guest", "disabled")%>';
			var gn_ip='<%=uci:get("network", "guest", "ipaddr")%>';
			var gn_mask='<%=uci:get("network", "guest", "netmask")%>';
			if(gn1_dis == 0 || gn2_dis == 0){
				if(isSameSubnet(gn_ip, gn_mask, getByName('ipv4_ipaddr').value, getByName('ipv4_netmask').value)){
					alert("<%:The ip address cannot overlap the guest network.%>");
					setfocus(getByName('ipv4_ipaddr'));
					return false;
				}				
			}
			if(getByName('ipv4_gateway').value != "")
			{
				if(!isIpaddr(getByName('ipv4_gateway').value))
				{
					alert(invalid("<%:Gateway%>"));
					setfocus(getByName('ipv4_gateway'));
					return false;
				}
				if(isMulticast(getByName('ipv4_gateway').value))
				{
					alert("<%:The gateway cannot be a multicast ip address.%>");
					setfocus(getByName('ipv4_gateway'));
					return false;
				}
				if(isLinklocal(getByName('ipv4_gateway').value))
				{
					alert("<%:The gateway cannot be a linklocal ip address.%>");
					setfocus(getByName('ipv4_gateway'));
					return false;
				}
				if(isLoopback(getByName('ipv4_gateway').value))
				{
					alert("<%:The gateway cannot be a loopback ip address.%>");
					setfocus(getByName('ipv4_gateway'));
					return false;
				}
			}
			if(getByName('ipv4_gateway').value != "" && getByName('ipv4_ipaddr').value != "")
			{
				if(!isSameSubnet(getByName('ipv4_ipaddr').value, getByName('ipv4_netmask').value, getByName('ipv4_gateway').value))
				{
					alert(invalid("<%:IP address! \n It should be located in the same subnet of current gateway.%>"));
					setfocus(getByName('ipv4_ipaddr'));
					return false;
				}
			}
			if(getByName('ipv4_dns1').value != "" && getByName('ipv4_dns1').value != "0.0.0.0")
			{
				if(!isIpaddr(getByName('ipv4_dns1').value))
				{
					alert(invalid("<%:Primary DNS%>"));
					setfocus(getByName('ipv4_dns1'));
					return false;
				}
				if(isMulticast(getByName('ipv4_dns1').value))
				{
					alert("<%:The primary DNS cannot be a multicast ip address.%>");
					setfocus(getByName('ipv4_dns1'));
					return false;
				}
				if(isLinklocal(getByName('ipv4_dns1').value))
				{
					alert("<%:The primary DNS cannot be a linklocal ip address.%>");
					setfocus(getByName('ipv4_dns1'));
					return false;
				}
				if(isLoopback(getByName('ipv4_dns1').value))
				{
					alert("<%:The primary DNS cannot be a loopback ip address.%>");
					setfocus(getByName('ipv4_dns1'));
					return false;
				}
			}
			if(getByName('ipv4_dns2').value != "" && getByName('ipv4_dns2').value != "0.0.0.0")
			{
				if(!isIpaddr(getByName('ipv4_dns2').value))
				{
					alert(invalid("<%:Secondary DNS%>"));
					setfocus(getByName('ipv4_dns2'));
					return false;
				}
				if(isMulticast(getByName('ipv4_dns2').value))
				{
					alert("<%:The secondary DNS cannot be a multicast ip address.%>");
					setfocus(getByName('ipv4_dns2'));
					return false;
				}
				if(isLinklocal(getByName('ipv4_dns2').value))
				{
					alert("<%:The secondary DNS cannot be a linklocal ip address.%>");
					setfocus(getByName('ipv4_dns2'));
					return false;
				}
				if(isLoopback(getByName('ipv4_dns2').value))
				{
					alert("<%:The secondary DNS cannot be a loopback ip address.%>");
					setfocus(getByName('ipv4_dns2'));
					return false;
				}
			}
<%
	if (uci:get("functionlist","functionlist","SUPPORT_IPV6_DISABLED") or "0") == "0" then
%>
			/*<%#IPv6 check%>*/
			if(functionlist.SUPPORT_IPV6_SETTING_INDEPENDENT==1?($('select[name$="ipv6_proto"]').find('option:selected').val()=="static"):(!$('input[name$="linklocal_ipv6"]').prop('checked')))
			{
				if(checkIpAddrV6(getByName('ipv6_ipaddr')) != IPv6_VALID_IP)
				{
					alert("<%:The IPv6 address is an invalid address.%>");
					setfocus(getByName('ipv6_ipaddr'));
					return false;
				}
				if(!isRange(getByName('ipv6_subprefixleng'), "IPv6 Subnet Prefix Length", 2, 128))
				{
					setfocus(getByName('ipv6_subprefixleng'));
					return false;
				}
				if(checkIpAddrV6allowEmpty(getByName('ipv6_gateway')) != IPv6_VALID_IP)
				{
					alert("<%:The IPv6 gateway is an invalid address.%>");
					setfocus(getByName('ipv6_gateway'));
					return false;
				}
				if((getByName('ipv6_dns1').value == "") && (getByName('ipv6_dns2').value != ""))
				{
					getByName('ipv6_dns1').value = getByName('ipv6_dns2').value;
					getByName('ipv6_dns2').value = "";
				}
				if(checkIpAddrV6allowEmpty(getByName('ipv6_dns1')) != IPv6_VALID_IP)
				{
					alert("<%:The primary DNS is an invalid address.%>");
					setfocus(getByName('ipv6_dns1'));
					return false;
				}
				if(getByName('ipv6_dns2').value != "")
				{
					if(checkIpAddrV6allowEmpty(getByName('ipv6_dns2')) != IPv6_VALID_IP)
					{
						alert("<%:The secondary DNS is an invalid address.%>");
						setfocus(getByName('ipv6_dns2'));
						return false;
					}
				}
			}
<%
end
%>
		}
		
		
		/*<%#STP check%>*/
		if(document.getElementsByName('enable_stp')[0].checked)
		{
			if(!isRange(document.getElementsByName('stp_hello_time')[0], "<%:Hello Time%>", 1, 10))
			{
				return false;
			}
			if(!isRange(document.getElementsByName('stp_max_age')[0], "<%:Max Age%>", 6, 40))
			{
				return false;
			}
			if(!isRange(document.getElementsByName('stp_forward_delay')[0], "<%:Forward Delay%>", 4, 30))
			{
				return false;
			}
			if(!isRange(document.getElementsByName('stp_priority')[0], "<%:Priority%>", 0, 65535))
			{
				return false;
			}
			if(!(2*(parseInt($("input[name='stp_hello_time']").val(),10) + 1) <= parseInt($("input[name='stp_max_age']").val(),10) && parseInt($("input[name='stp_max_age']").val(),10) <= 2*(parseInt($("input[name='stp_forward_delay']").val(),10) - 1)))
			{
				alert("<%:The STP settings should follow rule%> : 2*(<%:Hello Time%> + 1.0 second)  < = <%:Max-Age Time%> <= 2*(<%:Forward-Delay%> - 1.0 second)")
				return false;
			}
		}
		if(functionlist.SUPPORT_ETHERNET_BONDING==1){
			if(document.getElementsByName('lacp_enable')[0].checked){
				if(!isRange(document.getElementsByName('system_priority')[0], "<%:System Priority%>", 1, 65535)){
					return false;
				}
				// if(document.getElementsByName('enable_stp')[0].checked){
				// 	alert("<%:LACP and STP can not be enable at the same time%>")
				// 	return false;
				// }
				// ATKK think that lacp and vlan can be enable together, so i mark these check
				// if(mut_status["vlan"]=="1"){
				// 	alert("<%:LACP and VLAN can not be enable at the same time%>")
				// 	return false;
				// }				
			}
						
		}
		
		
		return true;
	}
	// for IPv6
	var IPv6_VALID_IP = 99;
	var IPv6_INVALID_IP = 0;
	var IPv6_ZERO_IP = 1;
	var IPv6_1st_IP_ERROR = 2;
	var IPv6_8th_IP_ERROR = 9;
	var IPv6_MULTICAST_IP_ERROR = 19;
	var IPV6_STR_ZERO_SYMBOL = 0;
	var IPV6_STR_ONE_SYMBOL = 1;
	var IPV6_STR_MORETHANTWO_SYMBOL = 2;
	var IPV6_ADDR_NOTALLOWZERO = 0;
	var IPV6_REGX = new RegExp("^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?$");
	var IPV6_LOCAL_REGX = new RegExp("^([0]{1,4}::){1}[0-9A-Fa-f]{1,4}$");
	function check_char_hex(charstr)
	{
		charstr = charstr.toUpperCase();
		if(!(charstr >= 'A' && charstr <= 'F') && !(charstr >= '0' && charstr <= '9'))
		{
			return false;
		}
		return true;
	}
	function check_ipv6_symbol_num(str)
	{
		if(str.indexOf("::") == -1)
			return IPV6_STR_ZERO_SYMBOL;
		if(str.indexOf("::") == str.lastIndexOf("::"))
			return IPV6_STR_ONE_SYMBOL;
		if(str.indexOf("::") != str.lastIndexOf("::"))
			return IPV6_STR_MORETHANTWO_SYMBOL;
	}
	function reserveIpa6Adar(addr, prefix)
	{
		/*
			a. 2001:2::/48 (reserved for BMWG)
	        b. 2001::/32 (reserved for TEREDO)
	        c. 2002::/16 (reserved for 6to4)
	        d. 2001:db8::/32 (reserved for Documentation)
	        e. 2001:10::/28 (reserveed for IETF Protocol Assignment)
	        f: 2001::/28 (reserver for IETF Protocol Assignment)
	        g. 3ffe::/16 (reserved for 6bone)
		*/
		var str = addr.toLowerCase() + "/" + prefix, invalid = 0,
				ary = [/^(2001:2::)\S+(48)$/, /^(2001::)\S+(32)$/, /^(2002::)\S+(16)$/, /^(2001:db8::)\S+(32)$/, /^(2001:10::)\S+(28)$/, /^(2001::)\S+(28)$/, /^(3ffe::)\S+(16)$/, /^\S+(::0)\/\d+$/];
		for(var i = 0; i < ary.length; i++)
		{
			if (ary[i].test(str)){
				invalid = 1;
			}
		}
		return invalid;
	}
	function checkIpAddrV6(obj)
	{
		var ipv6array;
		var zero_count;
		var ipv6temp;
		var block_count;
		var sum;
		
		if(!/[23]/.test(obj.value[0]) || reserveIpa6Adar(obj.value, getByName('ipv6_subprefixleng').value) || check_ipv6_symbol_num(obj.value) == IPV6_STR_MORETHANTWO_SYMBOL)
		{
			return IPv6_INVALID_IP;
		}
		else if(check_ipv6_symbol_num(obj.value) == IPV6_STR_ZERO_SYMBOL)
		{
			ipv6array = obj.value.split(":");
			sum = 0;
			if(ipv6array.length == 8)
			{
				for(var i = 0; i < ipv6array.length; i++)
				{
					if(ipv6array[i].length > 4)
						return IPv6_INVALID_IP;
					for(var j = 0; j < ipv6array[i].length; j++)
					{
						if(!check_char_hex(ipv6array[i].charAt(j)))
						{
							return IPv6_1st_IP_ERROR + i;
						}
						sum += parseInt(ipv6array[i].charAt(j), 16);
					}
				}
				if(sum == 0)
				{
					return IPv6_ZERO_IP;
				}
			}
			else
			{
				return IPv6_INVALID_IP;
			}
		}
		else if(check_ipv6_symbol_num(obj.value) == IPV6_STR_ONE_SYMBOL)
		{
			ipv6array = obj.value.split("::");
			block_count = 0;
			sum = 0;
			if(ipv6array.length == 2)
			{
				for(var m = 0; m <= 1; m++)
				{
					ipv6temp = ipv6array[m].split(":");
					for(var n = 0; n < ipv6temp.length; n++)
					{
						if(ipv6temp[n].length > 4)
							return IPv6_INVALID_IP;
						for(var p = 0; p < ipv6temp[n].length; p++)
						{
							if(!check_char_hex(ipv6temp[n].charAt(p)))
							{
								return IPv6_1st_IP_ERROR + block_count;
							}
							sum += parseInt(ipv6temp[n].charAt(p), 16);
						}
						block_count++;
					}
				}
				if(sum == 0)
				{
					return IPv6_ZERO_IP;
				}
			}
			else
			{
				return IPv6_INVALID_IP;
			}
		}
		if(obj.value.charAt(0) == 'f' || obj.value.charAt(0) == 'F')
		{
			if(obj.value.charAt(1) == 'f' || obj.value.charAt(1) == 'F')
			{
				return IPv6_MULTICAST_IP_ERROR;
			}
		}
		return IPv6_VALID_IP;
	}
	function checkIpAddrV6allowEmpty(obj)
	{
		var ipv6array;
		var zero_count;
		var ipv6temp;
		var block_count;
		var sum;
		var empty=true;

		for ( var i = 0 ; i < obj.value.length ; i++ )
		{
			if(obj.value[i]!=" ")
				empty=false;
		}
		if(empty||obj.value.length==0)
			return IPv6_VALID_IP;

		if(!/[23]/.test(obj.value[0]) || reserveIpa6Adar(obj.value, getByName('ipv6_subprefixleng').value) || check_ipv6_symbol_num(obj.value) == IPV6_STR_MORETHANTWO_SYMBOL)
		{
			return IPv6_INVALID_IP;
		}
		else if(check_ipv6_symbol_num(obj.value) == IPV6_STR_ZERO_SYMBOL)
		{
			ipv6array = obj.value.split(":");
			sum = 0;
			if(ipv6array.length == 8)
			{
				for(var i = 0; i < ipv6array.length; i++)
				{
					if(ipv6array[i].length > 4)
						return IPv6_INVALID_IP;
					for(var j = 0; j < ipv6array[i].length; j++)
					{
						if(!check_char_hex(ipv6array[i].charAt(j)))
						{
							return IPv6_1st_IP_ERROR + i;
						}
						sum += parseInt(ipv6array[i].charAt(j), 16);
					}
				}
				if(sum == 0)
				{
					return IPv6_ZERO_IP;
				}
			}
			else
			{
				return IPv6_INVALID_IP;
			}
		}
		else if(check_ipv6_symbol_num(obj.value) == IPV6_STR_ONE_SYMBOL)
		{
			ipv6array = obj.value.split("::");
			block_count = 0;
			sum = 0;
			if(ipv6array.length == 2)
			{
				for(var m = 0; m <= 1; m++)
				{
					ipv6temp = ipv6array[m].split(":");
					for(var n = 0; n < ipv6temp.length; n++)
					{
						if(ipv6temp[n].length > 4)
							return IPv6_INVALID_IP;
						for(var p = 0; p < ipv6temp[n].length; p++)
						{
							if(!check_char_hex(ipv6temp[n].charAt(p)))
							{
								return IPv6_1st_IP_ERROR + block_count;
							}
							sum += parseInt(ipv6temp[n].charAt(p), 16);
						}
						block_count++;
					}
				}
				if(sum == 0)
				{
					return IPv6_ZERO_IP;
				}
			}
			else
			{
				return IPv6_INVALID_IP;
			}
		}
		if(obj.value.charAt(0) == 'f' || obj.value.charAt(0) == 'F')
		{
			if(obj.value.charAt(1) == 'f' || obj.value.charAt(1) == 'F')
			{
				return IPv6_MULTICAST_IP_ERROR;
			}
		}
		return IPv6_VALID_IP;
	}
	function IPV6_ADDR_CHECK(obj)
	{
		//alert("####IPV6_ADDR_CHECK 1: " + LANG_TOOLS_ALERT[45] + "   " + obj);  
		this.InvalidIP = LANG_TOOLS_ALERT[45];
		this.checkIPv6 = function(tag, allowzero)
		{
			var ERROR_NO = 0;
			if((ERROR_NO = checkIpAddrV6(obj)) != IPv6_VALID_IP)
			{
				//alert("IPV6_ADDR_CHECK 3");
				for(var i = IPv6_1st_IP_ERROR; i <= IPv6_8th_IP_ERROR;
				    i++)
				{
					if(ERROR_NO == i)
						alert(sprintf(LANG_IPV6_ALERT[ERROR_NO], tag));
				}
				if(ERROR_NO == IPv6_INVALID_IP || ERROR_NO == IPv6_MULTICAST_IP_ERROR)
					alert(sprintf(LANG_IPV6_ALERT[ERROR_NO], tag));
				if(typeof(allowzero) == "undefined" || allowzero == IPV6_ADDR_NOTALLOWZERO)
				{
					if(ERROR_NO == IPv6_ZERO_IP)
						alert(sprintf(LANG_IPV6_ALERT[ERROR_NO], tag));
				}
				//alert("IPV6_ADDR_CHECK 4");
				obj.focus();
				return false;
			}
			if(!IPV6_REGX.test(obj.value))
			{
				alert(this.InvalidIP);
				obj.focus();
				return false;
			}
			if(IPV6_LOCAL_REGX.test(obj.value))
			{
				alert(this.InvalidIP);
				obj.focus();
				return false;
			}
			return true;
		}
		;
		this.InvalidSuffix_hex = LANG_TOOLS_ALERT[46];
		this.InvalidSuffix = LANG_TOOLS_ALERT[47];
		this.check_ipv6_addr_suffix = function(tag)
		{
			if(obj.value.length > 0 && obj.value.length < 5)
			{
				for(var index = 0; index < obj.value.length;
				    index++)
				{
					if(!check_char_hex(obj.value.charAt(index)))
					{
						alert(sprintf(this.InvalidSuffix_hex, tag));
						obj.focus();
						return false;
					}
				}
			}
			else
			{
				alert(sprintf(this.InvalidSuffix, tag));
				obj.focus();
				return false;
			}
			return true;
		}
		;
	}
<%
if  uci:get('functionlist','functionlist','SUPPORT_ETHERNET_BONDING') == '1' then -----#### SUPPORT_ETHERNET_BONDING START ###
%>
var mut_status={}
function get_lacp_mut_status(){		
	$.ajax({
        url: "<%=luci.dispatcher.build_url('admin/status/get_lacp_mut_status')%>",
        data:"get_info=vlan",
		success: function(re) {
			// console.log(re);
			mut_status = re;
		}
	});	
}

$(function() {
	var lacp_enable = '<%=uci:get('network','lacp','lacp_enable') or 0%>';
	var short_timeout = '<%=uci:get('network','lacp','short_timeout') or 0%>';
	var system_priority = '<%=uci:get('network','lacp','system_priority') or 32768%>';
	$(':radio[name$="lacp_enable"]').click(function(){
		if($(this).val()=="1"){
			$("input[name$='short_timeout']").removeAttr("disabled");
			$("input[name$='system_priority']").removeAttr("disabled");
		}else{
			$("input[name$='short_timeout']").attr("disabled", "disabled");
			$("input[name$='system_priority']").attr("disabled", "disabled");			
		}

	});

	$(':radio[name$="lacp_enable"][value="'+lacp_enable+'"]').prop('checked','checked').triggerHandler('click');
	$(':radio[name$="short_timeout"][value="'+short_timeout+'"]').prop('checked','checked');
	$(':text[name$="system_priority"]').val(system_priority);

	// get_lacp_mut_status();

});	
<%
end-----####  SUPPORT_ETHERNET_BONDING END #### 
%>
<%
if  uci:get('functionlist','functionlist','SUPPORT_ETHERNET_VLAN') == '1' then -----#### SUPPORT_ETHERNET_VLAN START ###
%>
var LanPort=<%=LanPort%>;

	var myTable = (function() {

    
    var titleTable={
    "lan_port_settings":"<%:LAN Port Settings%>",
    }, 
    newTable = function (data,div_id,table_id){
        var $table = $(document.createElement('table'));
        $table.attr("id",table_id);
        $table.addClass("ecm-tbl");
        $table.appendTo($("#"+div_id));
        for(var i in data){
            for(var j in data[i]){
                 newTr(data[i],table_id,table_id+"_"+i);
            }           
        
        }
        if(div_id=="gn")
            newElement(table_id,'<tr><td colspan="9" class="title">'+titleTable[div_id]+'<img class="popper" data-popbox="Guest_Network_Settings_info" src="<%=media%>/pictures/icon_info_blue.png"></td></tr>');
        else
            newElement(table_id,'<tr><td colspan="9" class="title">'+titleTable[div_id]+'</td></tr>');
  },
    newTr = function(data,table_id,tr_id){
        var $tr = $(document.createElement('tr'));
        $tr.attr("id",tr_id);
        $tr.appendTo($("#"+table_id));
        for(var i in data){
            newTd(data[i],tr_id,tr_id+"_"+i);

            if(data[i]=="<%:Client Isolation%>")
            {
                newElement(tr_id+"_"+i,'<img class="popper" data-popbox="Client_Isolation_info" src="<%=media%>/pictures/icon_info_blue.png">');
            }
            if(data[i]=="<%:VLAN Isolation%>")
            {
                newElement(tr_id+"_"+i,'<img class="popper" data-popbox="VLAN_Isolation_info" src="<%=media%>/pictures/icon_info_blue.png">');
            }
        }

    },
    newTd = function(data,tr_id,td_id){
        var $td = $(document.createElement('td'));
        $td.attr("id",td_id);
        //$td.addClass((tr_id.indexOf("_name")>-1)?"tbl-grey":"tbl-value");
        $td.addClass((tr_id.indexOf("_name")>-1)?"tbl-grey":"tbl-value");
        $td.width('20%');
        $td.appendTo($("#"+tr_id));
        $td.text(data);
        //(typeof data!="string" && data)?$td.text(data):newDiv(data,tr_id);  
   
    },
    newDiv = function(data,td_id){
        var $div = $(document.createElement('div'));
        $div.attr("id",data);
        $div.appendTo($("#"+td_id));
    },
    newElement = function(container_id,element){
        if(container_id.split("encryption_view").length > 1)
        {
          $("#" + container_id).append(showEncryption(element));
        }
        else
        {
          $("#" + container_id).append(element);
        }
    };
    
return{
        newTable : newTable,
        newTr : newTr,
        newTd : newTd,
        newDiv : newDiv,
        newElement : newElement
    };
}());  
var lan_port_text = ["<%:Port%>","<%:Enable Port%>","<%:VLAN%>","<%:VLAN ID%>"]; 
myTable.newTable([],"lan_port_settings","lan_port_settings_tbl");     
myTable.newTr(lan_port_text,"lan_port_settings_tbl","lan_port_settings_name");

<% if uci:get("sysProductInfo","model","modelName") == "EWS550AP" then %>
var lan_port_info = [{port:"LAN1",port_enable:"0",isolation:"0",vlan_id:"0"},{port:"LAN2",port_enable:"0",isolation:"0",vlan_id:"0"},{port:"LAN3",port_enable:"0",isolation:"0",vlan_id:"0"}]
<% else %>
<% if uci:get("sysProductInfo","model","modelName") == "ECW115" then %>
var lan_port_info = [{port:"LAN2",port_enable:"0",isolation:"0",vlan_id:"0"},{port:"LAN3",port_enable:"0",isolation:"0",vlan_id:"0"}]
<% else %>
var lan_port_info = [{port:"LAN1",port_enable:"0",isolation:"0",vlan_id:"0"},{port:"LAN2",port_enable:"0",isolation:"0",vlan_id:"0"},{port:"LAN3",port_enable:"0",isolation:"0",vlan_id:"0"},{port:"LAN4",port_enable:"0",isolation:"0",vlan_id:"0"}]
<% end %>
<% end %>
/*create local port table*/
 for(var i in lan_port_info){
 	myTable.newTr([],"lan_port_settings_tbl",i);
	for(var j in lan_port_info[i]){
		var content_id = i+"_"+j+"_content";
        myTable.newTd([],i,i+"_"+j);
        myTable.newDiv(content_id,i+"_"+j);		
		if(j=="port"){
            myTable.newElement(content_id,lan_port_info[i][j]);
		}

		if(j=="port_enable"||j=="isolation"){
            var name = i+"."+j;
<% if  uci:get('functionlist','functionlist','SUPPORT_ETHERNET_VLAN_ADVANCE') == '1' then %>
			if (j=="isolation") {
				myTable.newElement(content_id,'<select id="vlan'+i+'" name="vlan'+i+'" size="1"> <option value="0"><%:Disable%></option><option value="1"><%:Trunk Port%></option><option value="2"><%:Access Port%></option>');
				$('#vlan'+i).val(LanPort.lanport[i].EnableVLAN);
				$('#vlan'+i).bind('change', function(){
					CheckLANPortSetting();
				});
			} else {
				myTable.newElement(content_id,'<input type="checkbox" value="'+LanPort.lanport[i].Enable+'" name="'+name+'" >');
				LanPort.lanport[i].Enable=="1"?$('[name="'+ name+'"]').attr("checked", true):$('[name="'+ name+'"]').attr("checked", false);
				$('[name="'+ name+'"]').bind('click', function(){
					SetLANPortSetting(this.name);
					CheckLANPortSetting();
				});
			}
<% else %>
            var is_check = lan_port_info[i][j]=="1"?"checked":"";
            myTable.newElement(content_id,'<input type="hidden" value="1" >');
            myTable.newElement(content_id,'<input type="checkbox" value="0" '+is_check+'  name="'+name+'" >');
<% end %>
		}
		if(j=="vlan_id"){
<% if  uci:get('functionlist','functionlist','SUPPORT_ETHERNET_VLAN_ADVANCE') == '1' then %>
			myTable.newElement(content_id,'<input type="text" id="vlanId'+i+'" value="'+LanPort.lanport[i].VLANId+'"  name="'+name+'"  maxlength="4"  style="width: 60px;">');
<% else %>
			var name = i+"."+j;
            myTable.newElement(content_id,'<input type="text" value="'+lan_port_info[i][j]+'"  name="'+name+'"  maxlength="4"  style="width: 60px;">');
<% end %>
		}		
	}
 }
CheckLANPortSetting(); 
 
<% if  uci:get('functionlist','functionlist','SUPPORT_ETHERNET_VLAN_ADVANCE') ~= '1' then %>
/*setting rule */
for(var i in lan_port_info){
	for(var j in lan_port_info[i]){
		
       if(j.indexOf("port_enable") > -1){
       var boxName	= i+"."+j;
       var trName	= i;
	    this_disabled = $(':checkbox[name="'+ boxName+'"]').bind('click',{trName:trName},function disableHandler(event) {
       		var this_vlan = $(':checkbox[name="'+trName+".isolation"+'"]');
       		var this_vlan_id = $(':text[name="'+trName+".vlan_id"+'"]');	    	
	            $('#'+event.data.trName).find(":checkbox").not($( this )).attr("disabled",!this.checked);                        
	            if(this.checked && this_vlan.prop('checked') ){
	                    this_vlan_id.attr("disabled",false);
	                }else{
	                    this_vlan_id.attr("disabled",true);
	            } 

	        });
	    this_disabled.triggerHandler('click');
    	}

        if(j.indexOf("isolation") > -1){
            var boxName = i+"."+j;
            var trName = i;
            $(':checkbox[name="'+ boxName+'"]').bind('click',{trName:trName},function disableHandler(event) {
	            $('#'+event.data.trName).find(":text").attr("disabled",!this.checked); 
            });

        }    	
	}
}
<% end %>

<%
end-----####  SUPPORT_ETHERNET_VLAN END #### 
%>
function CheckLANPortSetting() {
	for (var i=0; i<=3; i++) {
		if (document.getElementsByName(i+".port_enable")[0].checked==false) {
				document.getElementById("vlan"+i).disabled=true;
				document.getElementById("vlanId"+i).disabled=true;
		} else {
			document.getElementById("vlan"+i).disabled=false;
			if(document.getElementById("vlan"+i).value==0)
				document.getElementById("vlanId"+i).disabled=true;
			else
				document.getElementById("vlanId"+i).disabled=false;
		}
	}
}

function SetLANPortSetting(name) {
	if (document.getElementsByName(name)[0].checked)
		$('input[name="'+ name+'"]').val(1);
	else
		$('input[name="'+ name+'"]').val(0);
}
</script>
<%+footer%>
