<%#
LuCI - Lua Configuration Interface
Copyright 2010 Jo-Philipp Wich <xm@subsignal.org>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

$Id: bandwidth.htm 9014 2012-08-14 13:08:18Z jow $

-%>

<%-
	local ntm = require "luci.model.network".init()
	local uci = require "luci.model.uci".cursor()

	local dev
	local devices = { }
	for _, dev in luci.util.vspairs(luci.sys.net.up_devices()) do
		if dev ~= "lo" and not ntm:ignore_interface(dev) then
			devices[#devices+1] = dev
		end
	end

	local curdev = luci.dispatcher.context.requestpath
	      curdev = curdev[#curdev] ~= "bandwidth" and curdev[#curdev] or devices[1]
-%>

<%+header%>

<script type="text/javascript">//<![CDATA[
	var bwxhr = new XHR();

	var G;
	var TIME = 0;
	var RXB  = 1;
	var RXP  = 2;
	var TXB  = 3;
	var TXP  = 4;

	var width  = 760;
	var height = 300;
	var step   = 5;

	var data_wanted = Math.floor(width / step);
	var data_fill   = 0;
	var data_stamp  = 0;

	var data_rx = [ ];
	var data_tx = [ ];

	var line_rx;
	var line_tx;

	var label_25;
	var label_50;
	var label_75;

	var label_rx_cur;
	var label_rx_avg;
	var label_rx_peak;

	var label_tx_cur;
	var label_tx_avg;
	var label_tx_peak;

	var label_scale;


	function bandwidth_label(bytes, br, showParamters)
	{
		showParamters = showParamters || true;
		var uby = '<%:KB/s%>';
		var kby = (bytes / 1024);

		if (kby >= 1024)
		{
			uby = '<%:MB/s%>';
			kby = kby / 1024;
		}

		var ubi = '<%:kbit/s%>';
		var kbi = (bytes * 8 / 1024);

		if (kbi >= 1024)
		{
			ubi = '<%:Mbit/s%>';
			kbi = kbi / 1024;
		}

		$('#bandwidth').html(uby);
		return String.format("%f %s",
			kby.toFixed(2), (showParamters != "none")?uby:""
		);
	}

	/* wait for SVG */
	window.setTimeout(
		function() {
			var svg = document.getElementById('bwsvg');

			if(svg)
			{
				try
				{
					G=svg.getSVGDocument
							?svg.getSVGDocument():svg.contentDocument;
				}
				catch (e)
				{
					G=document.embeds['bwsvg'].getSVGDocument();
				}
			}

			if (!G)
			{
				XHR.poll(3, '<%=build_url("admin/status/realtime/bandwidth_status", curdev)%>', null,
					function(x, data)
					{
						label_rx_cur=document.getElementById('rx_bw_cur');
						label_rx_avg=document.getElementById('rx_bw_avg');
						label_rx_peak=document.getElementById('rx_bw_peak');
						label_tx_cur=document.getElementById('tx_bw_cur');
						label_tx_avg=document.getElementById('tx_bw_avg');
						label_tx_peak=document.getElementById('tx_bw_peak');
						
						var data_max   = 0;

						var data_rx_avg = 0;
						var data_tx_avg = 0;

						var data_rx_peak = 0;
						var data_tx_peak = 0;

						if((data != null) && (data.length != null))
						{
							for(var i=data_stamp?0:1; i<data.length; i++)
							{
								/* skip overlapping entries */
								if(data[i][TIME]<=data_stamp)
									continue;
								/* normalize difference against time interval */
								if(i>0)
								{
									var time_delta=data[i][TIME]-data[i-1][TIME];
									if(time_delta)
									{
										data_rx.push((data[i][RXB]-data[i-1][RXB])/time_delta);
										data_tx.push((data[i][TXB]-data[i-1][TXB])/time_delta);
									}
								}
							}
							/* cut off outdated entries */
							data_rx=data_rx.slice(data_rx.length-data_wanted,data_rx.length);
							data_tx=data_tx.slice(data_tx.length-data_wanted,data_tx.length);
							/* find peak */
							for(var i=0; i<data_rx.length; i++)
							{
								data_max=Math.max(data_max,data_rx[i]);
								data_max=Math.max(data_max,data_tx[i]);
								data_rx_peak=Math.max(data_rx_peak,data_rx[i]);
								data_tx_peak=Math.max(data_tx_peak,data_tx[i]);
								if(i>0)
								{
									data_rx_avg=(data_rx_avg+data_rx[i])/2;
									data_tx_avg=(data_tx_avg+data_tx[i])/2;
								}
								else
								{
									data_rx_avg=data_rx[i];
									data_tx_avg=data_tx[i];
								}
							}
							/* remember current timestamp, calculate horizontal scale */
							data_stamp=data[data.length-1][TIME];
							label_rx_cur.innerHTML=bandwidth_label(data_rx[data_rx.length-1],true);
							label_tx_cur.innerHTML=bandwidth_label(data_tx[data_tx.length-1],true);
							label_rx_avg.innerHTML=bandwidth_label(data_rx_avg,true);
							label_tx_avg.innerHTML=bandwidth_label(data_tx_avg,true);
							label_rx_peak.innerHTML=bandwidth_label(data_rx_peak,true);
							label_tx_peak.innerHTML=bandwidth_label(data_tx_peak,true);
						}
					}
				);
				
				window.setTimeout(arguments.callee, 1000);
			}
			else
			{
				/* find sizes */
				width       = svg.offsetWidth  - 2;
				height      = svg.offsetHeight - 2;
				data_wanted = Math.ceil(width / step);

				/* prefill datasets */
				for (var i = 0; i < data_wanted; i++)
				{
					data_rx[i] = 0;
					data_tx[i] = 0;
				}

				/* find svg elements */
				line_rx = G.getElementById('rx');
				line_tx = G.getElementById('tx');

				label_25 = G.getElementById('label_25');
				label_50 = G.getElementById('label_50');
				label_75 = G.getElementById('label_75');

				label_rx_cur  = document.getElementById('rx_bw_cur');
				label_rx_avg  = document.getElementById('rx_bw_avg');
				label_rx_peak = document.getElementById('rx_bw_peak');

				label_tx_cur  = document.getElementById('tx_bw_cur');
				label_tx_avg  = document.getElementById('tx_bw_avg');
				label_tx_peak = document.getElementById('tx_bw_peak');

				label_scale   = document.getElementById('scale');


				/* plot horizontal time interval lines */
				for (var i = width % (step * 60); i < width; i += step * 60)
				{
					var line = G.createElementNS('http://www.w3.org/2000/svg', 'line');
						line.setAttribute('x1', i);
						line.setAttribute('y1', 0);
						line.setAttribute('x2', i);
						line.setAttribute('y2', '100%');
						line.setAttribute('style', 'stroke:black;stroke-width:0.1');

					var text = G.createElementNS('http://www.w3.org/2000/svg', 'text');
						text.setAttribute('x', i + 5);
						text.setAttribute('y', 15);
						text.setAttribute('style', 'fill:#999999; font-size:9pt');
						text.appendChild(G.createTextNode(Math.round((width - i) / step / 60) + 'm'));

//					label_25.parentNode.appendChild(line);
//					label_25.parentNode.appendChild(text);
				}

				label_scale.innerHTML = String.format('<%:(%d minute window, %d second interval)%>', data_wanted / 60, 3);

				/* render datasets, start update interval */
				XHR.poll(3, '<%=build_url("admin/status/realtime/bandwidth_status", curdev)%>', null,
					function(x, data)
					{
						if (!data)
						{
							label_rx_cur.innerHTML = bandwidth_label(0, true);
							label_tx_cur.innerHTML = bandwidth_label(0, true);

							label_rx_avg.innerHTML = bandwidth_label(0, true);
							label_tx_avg.innerHTML = bandwidth_label(0, true);

							label_rx_peak.innerHTML = bandwidth_label(0, true);
							label_tx_peak.innerHTML = bandwidth_label(0, true);
							
							line_rx.setAttribute('style', 'display:none;');
							line_tx.setAttribute('style', 'display:none;');
							return;
						}

						var data_max   = 0;
						var data_scale = 0;

						var data_rx_avg = 0;
						var data_tx_avg = 0;

						var data_rx_peak = 0;
						var data_tx_peak = 0;

						for (var i = data_stamp ? 0 : 1; i < data.length; i++)
						{
							/* skip overlapping entries */
							if (data[i][TIME] <= data_stamp)
								continue;

							/* normalize difference against time interval */
							if (i > 0)
							{
								var time_delta = data[i][TIME] - data[i-1][TIME];
								if (time_delta)
								{
									data_rx.push((data[i][RXB] - data[i-1][RXB]) / time_delta);
									data_tx.push((data[i][TXB] - data[i-1][TXB]) / time_delta);
								}
							}
						}

						/* cut off outdated entries */
						data_rx = data_rx.slice(data_rx.length - data_wanted, data_rx.length);
						data_tx = data_tx.slice(data_tx.length - data_wanted, data_tx.length);

						/* find peak */
						for (var i = 0; i < data_rx.length; i++)
						{
							data_max = Math.max(data_max, data_rx[i]);
							data_max = Math.max(data_max, data_tx[i]);

							data_rx_peak = Math.max(data_rx_peak, data_rx[i]);
							data_tx_peak = Math.max(data_tx_peak, data_tx[i]);

							if (i > 0)
							{
								data_rx_avg = (data_rx_avg + data_rx[i]) / 2;
								data_tx_avg = (data_tx_avg + data_tx[i]) / 2;
							}
							else
							{
								data_rx_avg = data_rx[i];
								data_tx_avg = data_tx[i];
							}
						}

						/* remember current timestamp, calculate horizontal scale */
						data_stamp = data[data.length-1][TIME];
						if(data_max!=0){
							data_scale = height / (data_max * 1.1);
						}else{
							data_scale = 0;
						}
						data_rx.reverse();
						data_tx.reverse();

						/* plot data */
						var pt_rx = '0,' + height;
						var pt_tx = '0,' + height;

						var y_rx = 0;
						var y_tx = 0;

						for (var i = 0; i < data_rx.length; i++)
						{
							var x = i * step;

							y_rx = height - Math.floor(data_rx[i] * data_scale);
							y_tx = height - Math.floor(data_tx[i] * data_scale);

							pt_rx += ' ' + x + ',' + y_rx;
							pt_tx += ' ' + x + ',' + y_tx;
						}

						pt_rx += ' ' + width + ',' + y_rx + ' ' + width + ',' + height;
						pt_tx += ' ' + width + ',' + y_tx + ' ' + width + ',' + height;


						line_rx.setAttribute('points', pt_rx);
						line_rx.setAttribute('style', 'fill:none;stroke:blue;stroke-width:1;');
						line_tx.setAttribute('points', pt_tx);
						line_tx.setAttribute('style', 'fill:none;stroke:green;stroke-width:1;');

						data_rx.reverse();
						data_tx.reverse();

						var v_top = bandwidth_label(1.1 * 0.25 * data_max, true, "none");
						$("#bwsvg").css("width",  (v_top != 0)? (v_top >= 100)?"93%":"95%" :"97%");
						
						$("#label_25").html(bandwidth_label(1.1 * 0.25 * data_max, true, "none"));
						$("#label_50").html(bandwidth_label(1.1 * 0.50 * data_max, true, "none"));
						$("#label_75").html(bandwidth_label(1.1 * 0.75 * data_max, true, "none"));
						
						label_rx_cur.innerHTML = bandwidth_label(data_rx[data_rx.length-1], true);
						label_tx_cur.innerHTML = bandwidth_label(data_tx[data_tx.length-1], true);

						label_rx_avg.innerHTML = bandwidth_label(data_rx_avg, true);
						label_tx_avg.innerHTML = bandwidth_label(data_tx_avg, true);

						label_rx_peak.innerHTML = bandwidth_label(data_rx_peak, true);
						label_tx_peak.innerHTML = bandwidth_label(data_tx_peak, true);
					}
				);
			}
		}, 1000
	);
//]]></script>
<div id="Realtime_Traffic_info" class="popbox">
<%
local SupportRadio=""
if WLAN24G == "1" then
	SupportRadio = "2.4G"
end
if WLAN5G == "1" then
	if SupportRadio=="" then  SupportRadio="5G" else SupportRadio=""..SupportRadio.." and 5G" end
	if WLAN5G_2 == "1" then
		SupportRadio = ""..SupportRadio.."-1 and 5G-2"
	end
end
%>
    <p><%=SupportRadio%><%: and Ethernet port inbound and outbound traffic by current, average and peak time.%></p>
</div>
<h2><a id="content" name="content"><%:Realtime Traffic%> (<span id="bandwidth">KB/s</span>)</a><img class="popper" data-popbox="Realtime_Traffic_info" src="<%=media%>/pictures/icon_info_blue.png"></h2>

<ul class="cbi-tabmenu">
	<%
	function qreplace(s)
		local v=s
if uci:get('functionlist','functionlist','SUPPORT_DUAL_LAN_PORT') == '1' then -----#### SUPPORT_DUAL_LAN_PORT START ###
	if s == "eth0" then
		v = translate(uci:get("functionlist","vendorlist","GUI_ETH0_NAME") or "LAN1")
	end
	if s == "eth1" then
		v = translate(uci:get("functionlist","vendorlist","GUI_ETH1_NAME") or "LAN2")
	end		
else -----#### SUPPORT_DUAL_LAN_PORT ELSE ###
		if s == "eth0" or s == "eth1" then
			v = translate("LAN")
		end
end -----#### SUPPORT_DUAL_LAN_PORT END ###

		if ntm:get_wifinet(s) then
			v = ntm:get_wifinet(s)["iwdata"].ssid
			if s == "ath35" then
				v = translate("MESH_5G")
			end
			if s == "ath32" then
				v = translate("MESH_24G")
			end
		end
		return luci.util.repSpec(v)
	end
	%>
	<% for _, dev in ipairs(devices) do
		if  dev ~= "br-lan" and not string.find(dev, "br-") and not string.find(dev, "eth0.") and not string.find(dev, "eth1.") and (string.find(dev, "ath") or string.find(dev, "eth")) and ( uci:get('functionlist','functionlist','SUPPORT_IPCAM') ~= "1" or dev ~= "eth1" ) then
			if ntm:get_wifinet(pcdata(dev)) and filterRadio and ntm:get_wifinet(pcdata(dev))["iwdata"].device==filterRadio  then
			else
				local show="1"
if uci:get('functionlist','functionlist','SUPPORT_REPEATER_MODULE') == '1' then -----#### SUPPORT_REPEATER_MODULE START ###
				local opmode_24G = uci:get("wireless","wifi0","opmode")
				local opmode_5G  = uci:get("wireless","wifi1","opmode")
				local if_24G = {"ath0","ath01","ath02","ath03","ath04","ath05","ath06","ath7"}
				local if_5G = {"ath1","ath11","ath12","ath13","ath14","ath15","ath16","ath17"}

				for i=1,#if_24G do
					if if_24G[i] == dev and opmode_24G == "sta_ap" then
						show = "0"
					end
				end

				for i=1,#if_5G do
					if if_5G[i] == dev and opmode_5G == "sta_ap" then
						show = "0"
					end
				end
end -----#### SUPPORT_REPEATER_MODULE END ###
				if dev ~= "ath32" and dev ~= "ath35" and dev ~= "ath29" and dev ~= "ath59" and dev ~= "ath49" and show == "1" then
	%>
			<li class="cbi-tab<%= dev == curdev and "" or "-disabled" %>"><a href="<%=pcdata(dev)%>"><script>document.write(repSpecHTML("<%=qreplace(pcdata(dev))%>"));</script></a></li>
	<%
				end
			end
		end
	end %>
</ul>

<script>
	if($.support.leadingWhitespace)
	{
		document.write('<div class="realtime_chart"><div id="label_25" class="label_75"></div><div id="label_50" class="label_50"></div><div id="label_75" class="label_25"></div><embed id="bwsvg" style="width:97%; height:300px; border:1px solid #000000; background-color:#FFFFFF" src="<%=resource%>/bandwidth.svg" /> </div>');
	}
</script>
<div style="text-align:right"><small id="scale">-</small></div>
<br />

<table style="width:100%; table-layout:fixed" cellspacing="5">
	<tr>
		<td style="text-align:right; vertical-align:top"><strong style="border-bottom:2px solid blue"><%:Inbound:%></strong></td>
		<td id="rx_bw_cur">(0 <%:KB/s%>)</td>

		<td style="text-align:right; vertical-align:top"><strong><%:Average:%></strong></td>
		<td id="rx_bw_avg">(0 <%:KB/s%>)</td>

		<td style="text-align:right; vertical-align:top"><strong><%:Peak:%></strong></td>
		<td id="rx_bw_peak">(0 <%:KB/s%>)</td>
	</tr>
	<tr>
		<td style="text-align:right; vertical-align:top"><strong style="border-bottom:2px solid green"><%:Outbound:%></strong></td>
		<td id="tx_bw_cur">(0 <%:KB/s%>)</td>

		<td style="text-align:right; vertical-align:top"><strong><%:Average:%></strong></td>
		<td id="tx_bw_avg">(0 <%:KB/s%>)</td>

		<td style="text-align:right; vertical-align:top"><strong><%:Peak:%></strong></td>
		<td id="tx_bw_peak">(0 <%:KB/s%>)</td>
	</tr>
</table>

<%+footer%>
